<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
	<Properties>
		<!-- ==============================================公共配置============================================== -->
		<!-- 设置日志文件的目录名称 -->
		<property name="LOG_FILENAME">assembly-demo</property>
		<Property name="LOG_EXCEPTION_CONVERSION_WORD">%xwEx</Property>
		<Property name="LOG_LEVEL_PATTERN">%5p</Property>
		<Property name="LOG_DATE_FORMAT_PATTERN">yyyy-MM-dd HH:mm:ss.SSS</Property>
		<property name="BASE_PATH">./logs/${LOG_FILENAME}</property>
		<!-- 日志输出格式 -->
		<Property name="CONSOLE_LOG_PATTERN">%clr{%d{${LOG_DATE_FORMAT_PATTERN}}}{faint} %clr{${LOG_LEVEL_PATTERN}} %clr{%pid}{magenta} %clr{--}{faint} %clr{[%15.15t]}{faint} %clr{at %c.%M(%F:%L)}{cyan} %clr{:}{faint} %m%n</Property>
		<!--		<Property name="CONSOLE_LOG_PATTERN">%-5p - [%-80m] - at %c.%M(%F:%L)%n</Property>-->
		<Property name="FILE_LOG_PATTERN">%d{${LOG_DATE_FORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} %pid [${LOG_FILENAME}] --- [%t] %-40.40c : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>
		<!-- 日志默认输出级别 -->
		<property name="OUTPUT_LOG_LEVEL">INFO</property>
		<!-- 日志默认切割的最小单位 -->
		<property name="EVERY_FILE_SIZE">100MB</property>

		<!-- ===========================================所有级别日志配置=========================================== -->
		<!-- 日志默认存放路径(所有级别日志) -->
		<property name="ROLLING_FILENAME">${BASE_PATH}/all.log</property>
		<!-- 日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="ROLLING_FILE_PATTERN">${BASE_PATH}/%d{yyyy-MM}/all-%d{yyyy-MM-dd-HH}-%i.log.gz</property>
		<!-- 日志默认同类型日志,同一文件夹下可以存放的数量,不设置此属性则默认为7个,filePattern最后要带%i才会生效 -->
		<property name="ROLLING_MAX">500</property>
		<!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用;
                如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
                如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
		<property name="ROLLING_TIME_INTERVAL">12</property>
		<!-- 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整,
                如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am -->
		<property name="ROLLING_TIME_MODULATE">true</property>


		<!-- ============================================Info级别日志============================================ -->
		<!-- Info日志默认存放路径(Info级别日志) -->
		<property name="INFO_FILENAME">${BASE_PATH}/info.log</property>
		<!-- Info日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="INFO_FILE_PATTERN">${BASE_PATH}/%d{yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz</property>
		<!-- Info日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
		<property name="INFO_MAX">100</property>
		<!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用;
                如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
                如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
		<property name="INFO_TIME_INTERVAL">1</property>
		<!-- 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整,
                如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am -->
		<property name="INFO_TIME_MODULATE">true</property>

		<!-- ============================================Warn级别日志============================================ -->
		<!-- Warn日志默认存放路径(Warn级别日志) -->
		<property name="WARN_FILENAME">${BASE_PATH}/warn.log</property>
		<!-- Warn日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="WARN_FILE_PATTERN">${BASE_PATH}/%d{yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz</property>
		<!-- Warn日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
		<property name="WARN_MAX">100</property>
		<!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用;
                如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
                如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
		<property name="WARN_TIME_INTERVAL">1</property>
		<!-- 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整,
                如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am -->
		<property name="WARN_TIME_MODULATE">true</property>

		<!-- ============================================Error级别日志============================================ -->
		<!-- Error日志默认存放路径(Error级别日志) -->
		<property name="ERROR_FILENAME">${BASE_PATH}/error.log</property>
		<!-- Error日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 -->
		<property name="ERROR_FILE_PATTERN">${BASE_PATH}/%d{yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz</property>
		<!-- Error日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 -->
		<property name="ERROR_MAX">100</property>
		<!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用;
                如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
                如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
		<property name="ERROR_TIME_INTERVAL">1</property>
		<!-- 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整,
                如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am -->
		<property name="ERROR_TIME_MODULATE">true</property>


		<!-- ============================================控制台显示控制============================================ -->
		<!-- 控制台显示的日志最低级别 -->
		<property name="CONSOLE_PRINT_LEVEL">INFO</property>
	</Properties>
	<Appenders>

		<!-- =======================================用来定义输出到控制台的配置======================================= -->
		<Console name="Console" target="SYSTEM_OUT" follow="true">
			<!-- 设置控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch)-->
			<ThresholdFilter level="${CONSOLE_PRINT_LEVEL}" onMatch="ACCEPT" onMismatch="DENY"/>
			<!-- 设置输出格式,不设置默认为:%m%n -->
			<PatternLayout pattern="${CONSOLE_LOG_PATTERN}"/>
		</Console>

		<!-- ================================打印root中指定的level级别以上的日志到文件================================ -->
		<RollingFile name="RollingFile" fileName="${ROLLING_FILENAME}" filePattern="${ROLLING_FILE_PATTERN}">
			<PatternLayout pattern="${FILE_LOG_PATTERN}"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="${ROLLING_TIME_INTERVAL}" modulate="${ROLLING_TIME_MODULATE}"/>
				<SizeBasedTriggeringPolicy size="${EVERY_FILE_SIZE}"/>
			</Policies>
			<!-- 设置同类型日志,同一文件夹下可以存放的数量,如果不设置此属性则默认存放7个文件 -->
			<DefaultRolloverStrategy max="${ROLLING_MAX}"/>
		</RollingFile>

		<!-- =======================================打印INFO级别的日志到文件======================================= -->
		<RollingFile name="InfoFile" fileName="${INFO_FILENAME}" filePattern="${INFO_FILE_PATTERN}">
			<PatternLayout pattern="${FILE_LOG_PATTERN}"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="${INFO_TIME_INTERVAL}" modulate="${INFO_TIME_MODULATE}"/>
				<SizeBasedTriggeringPolicy size="${EVERY_FILE_SIZE}"/>
			</Policies>
			<DefaultRolloverStrategy max="${INFO_MAX}"/>
			<Filters>
				<ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
				<ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
		</RollingFile>

		<!-- =======================================打印WARN级别的日志到文件======================================= -->
		<RollingFile name="WarnFile" fileName="${WARN_FILENAME}" filePattern="${WARN_FILE_PATTERN}">
			<PatternLayout pattern="${FILE_LOG_PATTERN}"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="${WARN_TIME_INTERVAL}" modulate="${WARN_TIME_MODULATE}"/>
				<SizeBasedTriggeringPolicy size="${EVERY_FILE_SIZE}"/>
			</Policies>
			<DefaultRolloverStrategy max="${WARN_MAX}"/>
			<Filters>
				<ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
				<ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
		</RollingFile>

		<!-- =======================================打印ERROR级别的日志到文件======================================= -->
		<RollingFile name="ErrorFile" fileName="${ERROR_FILENAME}" filePattern="${ERROR_FILE_PATTERN}">
			<PatternLayout pattern="${FILE_LOG_PATTERN}"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="${ERROR_TIME_INTERVAL}" modulate="${ERROR_TIME_MODULATE}"/>
				<SizeBasedTriggeringPolicy size="${EVERY_FILE_SIZE}"/>
			</Policies>
			<DefaultRolloverStrategy max="${ERROR_MAX}"/>
			<Filters>
				<ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL"/>
				<ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
		</RollingFile>

		<!--<Socket name="Socket" host="127.0.0.1" port="5200" protocol="TCP">
			<JsonLayout properties="true" compact="true" eventEol="true">
				<KeyValuePair key="serviceName" value="${logFileName}"/>
			</JsonLayout>
			&lt;!&ndash;            <PatternLayout pattern="${log_pattern_socket}"/>&ndash;&gt;
		</Socket>-->
	</Appenders>
	<Loggers>
		<Logger name="org.apache.catalina.startup.DigesterFactory" level="error"/>
		<Logger name="org.apache.catalina.util.LifecycleBase" level="error"/>
		<Logger name="org.apache.coyote.http11.Http11NioProtocol" level="warn"/>
		<logger name="org.apache.sshd.common.util.SecurityUtils" level="warn"/>
		<Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="warn"/>
		<Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="error"/>
		<Logger name="org.hibernate.validator.internal.util.Version" level="warn"/>
		<logger name="org.springframework.boot.actuate.endpoint.jmx" level="warn"/>

		<!-- 设置打印sql语句配置开始,以下两者配合使用,可以优化日志的输出信息,减少一些不必要信息的输出 -->
		<!-- 设置java.sql包下的日志只打印DEBUG及以上级别的日志,此设置可以支持sql语句的日志打印 -->
		<logger name="java.sql" level="DEBUG" additivity="false">
			<appender-ref ref="Console"/>
		</logger>
		<!-- 设置org.mybatis.spring包下的日志只打印WARN及以上级别的日志 -->
		<logger name="org.mybatis.spring" level="WARN" additivity="false">
			<appender-ref ref="Console"/>
		</logger>
		<!-- 设置org.mybatis.spring包下的日志只打印WARN及以上级别的日志 -->
		<logger name="org.springframework" level="WARN" additivity="false">
			<appender-ref ref="Console"/>
		</logger>
		<logger name="com.netflix" level="ERROR" additivity="false">
			<appender-ref ref="Console"/>
		</logger>
		<logger name="reactor.netty" level="ERROR" additivity="false">
			<appender-ref ref="Console"/>
		</logger>
		<logger name="org.apache.http" level="ERROR" additivity="false">
			<appender-ref ref="Console"/>
		</logger>
		<Root level="${OUTPUT_LOG_LEVEL}">
			<appender-ref ref="RollingFile"/>
			<appender-ref ref="Console"/>
			<appender-ref ref="InfoFile"/>
			<appender-ref ref="WarnFile"/>
			<appender-ref ref="ErrorFile"/>
<!--			<appender-ref ref="Socket"/>-->
		</Root>
	</Loggers>
</Configuration>
